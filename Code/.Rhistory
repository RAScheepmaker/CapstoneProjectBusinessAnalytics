# being thicker. $50 overplotted as red line.
# ##############################################################################
opar <- par(no.readonly=TRUE)
# ---------------
income <- list('avg', 22485, 34988, 44518, 59200, 83894, 121806, 171270, 322568)
K <- 9
eta <- 0
theta <- 0
# ---------------
MB <- matrix(0, nrow = length(income), ncol = K)
for (i in 1:length(income)) {
# Get the budget corresponding to the income bin
budget <- get_budget(income[[i]], budget_data)
portfolio_plot2 <- get_portfolio(K, eta, theta, cards_data, budget, verbose = FALSE)
MB[i,] <- portfolio_plot2$marginal_benefit
}
mycolors <- brewer.pal(length(income)-1, "Dark2")
pdf('../Figures/MBvsKvsIncome_0_0.pdf', height = 7, width = 7)
par(mar=c(4,4,2,1), cex.axis=0.8)
plot(0,0, type = 'l', xlim = c(1,9), ylim = c(0,800), lwd = 3, xaxt = 'n',
xlab = "Card #", ylab = "Marginal Benefit [$]",
main = TeX(sprintf(r'($\eta$ = %.1f    $\theta$ = %.1f)', eta, theta)))
axis(1, at = seq(1, 9))
for (i in 2:length(income)){
lines(1:K, MB[i, ], type = 'b', col = mycolors[i-1], lwd = 2, pch = i)
}
lines(1:K, MB[1, ], type = 'b', col = 'black', lwd = 3, lty = 2, pch = 1)
abline(h = 50, col = "black", lwd = 2, lty = 5)
text(1, 70, c('$50'), cex = 0.8, pos = 4, col = 'black')
income_legend <- rev(c('$22k', '$35k', '$45k', '$59k', '$84k', '$122k', '$171k', '$323k', '$94k'))
colors_legend <- rev(append(mycolors, c("#000000")))
legend('topright', title="Income", income_legend, col = colors_legend,
lwd = c(3, 2,2,2,2,2,2,2,2), lty = c(2, 1,1,1,1,1,1,1,1), pch = c(1, 9,8,7,6,5,4,3,2))
dev.off()
# ---------------
income <- list('avg', 22485, 34988, 44518, 59200, 83894, 121806, 171270, 322568)
K <- 9
eta <- 0.5
theta <- 0.5
# ---------------
MB <- matrix(0, nrow = length(income), ncol = K)
for (i in 1:length(income)) {
# Get the budget corresponding to the income bin
budget <- get_budget(income[[i]], budget_data)
portfolio_plot2 <- get_portfolio(K, eta, theta, cards_data, budget, verbose = FALSE)
MB[i,] <- portfolio_plot2$marginal_benefit
}
mycolors <- brewer.pal(length(income)-1, "Dark2")
pdf('../Figures/MBvsKvsIncome_05_05.pdf', height = 7, width = 7)
par(mar=c(4,4,2,1), cex.axis=0.8)
plot(0,0, type = 'l', xlim = c(1,9), ylim = c(0,800), lwd = 3, xaxt = 'n',
xlab = "Card #", ylab = "Marginal Benefit [$]",
main = TeX(sprintf(r'($\eta$ = %.1f    $\theta$ = %.1f)', eta, theta)))
axis(1, at = seq(1, 9))
for (i in 2:length(income)){
lines(1:K, MB[i, ], type = 'b', col = mycolors[i-1], lwd = 2, pch = i)
}
lines(1:K, MB[1, ], type = 'b', col = 'black', lwd = 3, lty = 2, pch = 1)
abline(h = 50, col = "black", lwd = 2, lty = 5)
text(1, 70, c('$50'), cex = 0.8, pos = 4, col = 'black')
income_legend <- rev(c('$22k', '$35k', '$45k', '$59k', '$84k', '$122k', '$171k', '$323k', '$94k'))
colors_legend <- rev(append(mycolors, c("#000000")))
legend('topright', title="Income", income_legend, col = colors_legend,
lwd = c(3, 2,2,2,2,2,2,2,2), lty = c(2, 1,1,1,1,1,1,1,1), pch = c(1, 9,8,7,6,5,4,3,2))
dev.off()
# ---------------
income <- list('avg', 22485, 34988, 44518, 59200, 83894, 121806, 171270, 322568)
K <- 9
eta <- 1
theta <- 1
# ---------------
MB <- matrix(0, nrow = length(income), ncol = K)
for (i in 1:length(income)) {
# Get the budget corresponding to the income bin
budget <- get_budget(income[[i]], budget_data)
portfolio_plot2 <- get_portfolio(K, eta, theta, cards_data, budget, verbose = FALSE)
MB[i,] <- portfolio_plot2$marginal_benefit
}
mycolors <- brewer.pal(length(income)-1, "Dark2")
pdf('../Figures/MBvsKvsIncome_1_1.pdf', height = 7, width = 7)
par(mar=c(4,4,2,1), cex.axis=0.8)
plot(0,0, type = 'l', xlim = c(1,9), ylim = c(0,800), lwd = 3, xaxt = 'n',
xlab = "Card #", ylab = "Marginal Benefit [$]",
main = TeX(sprintf(r'($\eta$ = %.1f    $\theta$ = %.1f)', eta, theta)))
axis(1, at = seq(1, 9))
for (i in 2:length(income)){
lines(1:K, MB[i, ], type = 'b', col = mycolors[i-1], lwd = 2, pch = i)
}
lines(1:K, MB[1, ], type = 'b', col = 'black', lwd = 3, lty = 2, pch = 1)
abline(h = 50, col = "black", lwd = 2, lty = 5)
text(1, 70, c('$50'), cex = 0.8, pos = 4, col = 'black')
income_legend <- rev(c('$22k', '$35k', '$45k', '$59k', '$84k', '$122k', '$171k', '$323k', '$94k'))
colors_legend <- rev(append(mycolors, c("#000000")))
legend('topright', title="Income", income_legend, col = colors_legend,
lwd = c(3, 2,2,2,2,2,2,2,2), lty = c(2, 1,1,1,1,1,1,1,1), pch = c(1, 9,8,7,6,5,4,3,2))
dev.off()
par(opar)
# ##############################################################################
# ##############################################################################
# 3. 3 panels: eta, theta = (0,0), (0.5, 0.5) and (1,1) and then
# marginal ROS (Return-On-Spend) vs number of cards for 10 lines of income, the avg income
# being thicker.
# ##############################################################################
opar <- par(no.readonly=TRUE)
# ---------------
income <- list('avg', 22485, 34988, 44518, 59200, 83894, 121806, 171270, 322568)
K <- 9
eta <- 0
theta <- 0
# ---------------
ROS <- matrix(0, nrow = length(income), ncol = K)
for (i in 1:length(income)) {
# Get the budget corresponding to the income bin
budget <- get_budget(income[[i]], budget_data)
portfolio_plot3 <- get_portfolio(K, eta, theta, cards_data, budget, verbose = FALSE)
ROS[i,] <- portfolio_plot3$return_on_spend * 100
}
mycolors <- brewer.pal(length(income)-1, "Dark2")
pdf('../Figures/ROSvsKvsIncome_0_0.pdf', height = 7, width = 7)
par(mar=c(4,4,2,1), cex.axis=0.8)
plot(0,0, type = 'l', xlim = c(1,9), ylim = c(2,8), lwd = 3, xaxt = 'n',
xlab = "Card #", ylab = "Return on Spend [%]",
main = TeX(sprintf(r'($\eta$ = %.1f    $\theta$ = %.1f)', eta, theta)))
axis(1, at = seq(1, 9))
for (i in 2:length(income)){
lines(1:K, ROS[i, ], type = 'b', col = mycolors[i-1], lwd = 2, pch = i)
}
lines(1:K, ROS[1, ], type = 'b', col = 'black', lwd = 3, lty = 2, pch = 1)
income_legend <- rev(c('$22k', '$35k', '$45k', '$59k', '$84k', '$122k', '$171k', '$323k', '$94k'))
colors_legend <- rev(append(mycolors, c("#000000")))
legend('topleft', title="Income", income_legend, col = colors_legend, cex = 0.9,
lwd = c(3, 2,2,2,2,2,2,2,2), lty = c(2, 1,1,1,1,1,1,1,1), pch = c(1, 9,8,7,6,5,4,3,2))
dev.off()
# ---------------
income <- list('avg', 22485, 34988, 44518, 59200, 83894, 121806, 171270, 322568)
K <- 9
eta <- 0.5
theta <- 0.5
# ---------------
ROS <- matrix(0, nrow = length(income), ncol = K)
for (i in 1:length(income)) {
# Get the budget corresponding to the income bin
budget <- get_budget(income[[i]], budget_data)
portfolio_plot3 <- get_portfolio(K, eta, theta, cards_data, budget, verbose = FALSE)
ROS[i,] <- portfolio_plot3$return_on_spend * 100
}
mycolors <- brewer.pal(length(income)-1, "Dark2")
pdf('../Figures/ROSvsKvsIncome_05_05.pdf', height = 7, width = 7)
par(mar=c(4,4,2,1), cex.axis=0.8)
plot(0,0, type = 'l', xlim = c(1,9), ylim = c(2,8), lwd = 3, xaxt = 'n',
xlab = "Card #", ylab = "Return on Spend [%]",
main = TeX(sprintf(r'($\eta$ = %.1f    $\theta$ = %.1f)', eta, theta)))
axis(1, at = seq(1, 9))
for (i in 2:length(income)){
lines(1:K, ROS[i, ], type = 'b', col = mycolors[i-1], lwd = 2, pch = i)
}
lines(1:K, ROS[1, ], type = 'b', col = 'black', lwd = 3, lty = 2, pch = 1)
income_legend <- rev(c('$22k', '$35k', '$45k', '$59k', '$84k', '$122k', '$171k', '$323k', '$94k'))
colors_legend <- rev(append(mycolors, c("#000000")))
legend('topleft', title="Income", income_legend, col = colors_legend, cex = 0.9,
lwd = c(3, 2,2,2,2,2,2,2,2), lty = c(2, 1,1,1,1,1,1,1,1), pch = c(1, 9,8,7,6,5,4,3,2))
dev.off()
# ---------------
income <- list('avg', 22485, 34988, 44518, 59200, 83894, 121806, 171270, 322568)
K <- 9
eta <- 1
theta <- 1
# ---------------
ROS <- matrix(0, nrow = length(income), ncol = K)
for (i in 1:length(income)) {
# Get the budget corresponding to the income bin
budget <- get_budget(income[[i]], budget_data)
portfolio_plot3 <- get_portfolio(K, eta, theta, cards_data, budget, verbose = FALSE)
ROS[i,] <- portfolio_plot3$return_on_spend * 100
}
mycolors <- brewer.pal(length(income)-1, "Dark2")
pdf('../Figures/ROSvsKvsIncome_1_1.pdf', height = 7, width = 7)
par(mar=c(4,4,2,1), cex.axis=0.8)
plot(0,0, type = 'l', xlim = c(1,9), ylim = c(2,8), lwd = 3, xaxt = 'n',
xlab = "Card #", ylab = "Return on Spend [%]",
main = TeX(sprintf(r'($\eta$ = %.1f    $\theta$ = %.1f)', eta, theta)))
axis(1, at = seq(1, 9))
for (i in 2:length(income)){
lines(1:K, ROS[i, ], type = 'b', col = mycolors[i-1], lwd = 2, pch = i)
}
lines(1:K, ROS[1, ], type = 'b', col = 'black', lwd = 3, lty = 2, pch = 1)
income_legend <- rev(c('$22k', '$35k', '$45k', '$59k', '$84k', '$122k', '$171k', '$323k', '$94k'))
colors_legend <- rev(append(mycolors, c("#000000")))
legend('topleft', title="Income", income_legend, col = colors_legend, cex = 0.9,
lwd = c(3, 2,2,2,2,2,2,2,2), lty = c(2, 1,1,1,1,1,1,1,1), pch = c(1, 9,8,7,6,5,4,3,2))
dev.off()
par(opar)
# ##############################################################################
# ##############################################################################
# 4. 3 panels: K = 5. eta, theta = (0,0), (0.5, 0.5) and (1,1) and then
# Net Benefit vs Income.
# ##############################################################################
pdf('../Figures/NBvsIncome_K5.pdf', height = 7, width = 7)
# ---------------
income <- c(22485, 34988, 44518, 59200, 83894, 121806, 171270, 322568)
K <- 5
eta <- 0
theta <- 0
# ---------------
NB <- c()
for (i in 1:length(income)) {
# Get the budget corresponding to the income bin
budget <- get_budget(income[[i]], budget_data)
portfolio_plot4 <- get_portfolio(K, eta, theta, cards_data, budget, verbose = FALSE)
NB <- append(NB, tail(portfolio_plot4$net_benefit, n=1))
}
plot(income, NB, type = 'l', xlim = c(0,360000), ylim = c(0,6000), lwd = 2, lty = 3,
xlab = "Income [$]", ylab = "Net Benefit [$]",
main = TeX(sprintf(r'(K = %d)', K)))
eta <- 0.5
theta <- 0.5
NB <- c()
for (i in 1:length(income)) {
# Get the budget corresponding to the income bin
budget <- get_budget(income[[i]], budget_data)
portfolio_plot4 <- get_portfolio(K, eta, theta, cards_data, budget, verbose = FALSE)
NB <- append(NB, tail(portfolio_plot4$net_benefit, n=1))
}
lines(income, NB, type = 'l', col = 'black', lwd = 2, lty = 1)
eta <- 0.5
theta <- 1
NB <- c()
for (i in 1:length(income)) {
# Get the budget corresponding to the income bin
budget <- get_budget(income[[i]], budget_data)
portfolio_plot4 <- get_portfolio(K, eta, theta, cards_data, budget, verbose = FALSE)
NB <- append(NB, tail(portfolio_plot4$net_benefit, n=1))
}
lines(income, NB, type = 'l', col = 'black', lwd = 2, lty = 4)
eta <- 1
theta <- 1
NB <- c()
for (i in 1:length(income)) {
# Get the budget corresponding to the income bin
budget <- get_budget(income[[i]], budget_data)
portfolio_plot4 <- get_portfolio(K, eta, theta, cards_data, budget, verbose = FALSE)
NB <- append(NB, tail(portfolio_plot4$net_benefit, n=1))
}
lines(income, NB, type = 'l', col = 'black', lwd = 2, lty = 2)
legend('topleft', title=TeX(r'(($\eta$, $\theta$))'), c("(1, 1)","(0.5, 1)","(0.5, 0.5)","(0, 0)"),
lwd = c(2,2,2,2), lty = c(2,4,1,3))
dev.off()
# ##############################################################################
# 5. 3 pannels: for K = 5 and Income = (45k, avg, 160k):
# Return-On-Spend filled contour plot for theta (y-axis) vs eta (x-axis)
# ##############################################################################
# ---------------
income <- list(45000, 'avg', 160000)
K <- 4
eta <- seq(0,1,0.1)
theta <- seq(0,1,0.1)
ROS <- array(rep(0, length(income)*length(eta)*length(theta)), c(length(income), length(eta), length(theta)))
# ---------------
for (m in 1:length(income)) {
# Get the budget corresponding to the income bin
budget <- get_budget(income[[m]], budget_data)
for (i in 1:length(eta)) {
for (j in 1:length(theta)){
portfolio_plot5 <- get_portfolio(K, eta[i], theta[j], cards_data, budget, verbose = FALSE)
ROS[m,i,j] <- tail(portfolio_plot5$return_on_spend, n=1)
}
}
}
pdf('../Figures/ROSvsEtaTheta_K5_Inc45k.pdf', height = 7, width = 7)
filled.contour(eta, theta, ROS[1, ,]*100, levels = seq(2,7, 0.25),
plot.title = title(main = sprintf('Income = %s    K = %d', income[1], K),
xlab =  TeX(r'($\eta$)'), ylab = TeX(r'($\theta$)')),
key.title = title(main = "ROS [%]"),
plot.axes = {
axis(1)
axis(2)
contour(eta, theta, ROS[1, ,]*100, levels = seq(2,7, 0.5),labcex = 0.8, add = TRUE, lwd = 1)
}
)
dev.off()
pdf('../Figures/ROSvsEtaTheta_K5_IncAvgk.pdf', height = 7, width = 7)
filled.contour(eta, theta, ROS[2, ,]*100, levels = seq(2,7, 0.25),
plot.title = title(main = sprintf('Income = %s    K = %d', income[2], K),
xlab =  TeX(r'($\eta$)'), ylab = TeX(r'($\theta$)')),
key.title = title(main = "ROS [%]"),
plot.axes = {
axis(1)
axis(2)
contour(eta, theta, ROS[2, ,]*100, levels = seq(2,7, 0.5),labcex = 0.8, add = TRUE, lwd = 1)
}
)
dev.off()
pdf('../Figures/ROSvsEtaTheta_K5_Inc160k.pdf', height = 7, width = 7)
filled.contour(eta, theta, ROS[3, ,]*100, levels = seq(2,7, 0.25),
plot.title = title(main = sprintf('Income = %s    K = %d', income[3], K),
xlab =  TeX(r'($\eta$)'), ylab = TeX(r'($\theta$)')),
key.title = title(main = "ROS [%]"),
plot.axes = {
axis(1)
axis(2)
contour(eta, theta, ROS[3, ,]*100, levels = seq(2,7, 0.5),labcex = 0.8, add = TRUE, lwd = 1)
}
)
dev.off()
# ##############################################################################
# 6. Waterfalls Portfolio Plots.
# ##############################################################################
# ---------------
income <- "avg"
K <- 9
eta <- 0
theta <- 0
# ---------------
# Get the budget corresponding to the income bin
budget <- get_budget(income, budget_data)
pdf('../Figures/Waterfall_avg_9_0_0.pdf', height = 7, width = 7)
portfolio_plot6 <- get_portfolio(K, eta, theta, cards_data, budget, verbose = TRUE)
waterfall(values = portfolio_plot6$marginal_benefit, labels = portfolio_plot6$cards,
calc_total = TRUE, draw_lines = FALSE, total_rect_color = "orange",
total_rect_text_color = "black", rect_width = 0.9,
rect_text_labels = scales::dollar_format()(portfolio_plot6$marginal_benefit),
total_rect_text  = scales::dollar_format()(sum(portfolio_plot6$marginal_benefit))) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = TeX(sprintf(r'(K = %d    income = %s    $\eta$ = %.1f    $\theta$ = %.1f)',
K, income, eta, theta)), x = "", y = "Net Benefit") +
theme(plot.title = element_text(hjust = 0.5)) +
theme(axis.title = element_text()) +
scale_y_continuous(labels = scales::dollar_format())
dev.off()
# ---------------
income <- "avg"
K <- 9
eta <- 0.5
theta <- 0.5
# ---------------
# Get the budget corresponding to the income bin
budget <- get_budget(income, budget_data)
pdf('../Figures/Waterfall_avg_9_05_05.pdf', height = 7, width = 7)
portfolio_plot6 <- get_portfolio(K, eta, theta, cards_data, budget, verbose = TRUE)
waterfall(values = portfolio_plot6$marginal_benefit, labels = portfolio_plot6$cards,
calc_total = TRUE, draw_lines = FALSE, total_rect_color = "orange",
total_rect_text_color = "black",rect_width = 0.9,
rect_text_labels = scales::dollar_format()(portfolio_plot6$marginal_benefit),
total_rect_text  = scales::dollar_format()(sum(portfolio_plot6$marginal_benefit))) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = TeX(sprintf(r'(K = %d    income = %s    $\eta$ = %.1f    $\theta$ = %.1f)',
K, income, eta, theta)), x = "", y = "Net Benefit") +
theme(plot.title = element_text(hjust = 0.5)) +
theme(axis.title = element_text()) +
scale_y_continuous(labels = scales::dollar_format())
dev.off()
# ---------------
income <- "avg"
K <- 9
eta <- 1
theta <- 1
# ---------------
# Get the budget corresponding to the income bin
budget <- get_budget(income, budget_data)
pdf('../Figures/Waterfall_avg_9_1_1.pdf', height = 7, width = 7)
portfolio_plot6 <- get_portfolio(K, eta, theta, cards_data, budget, verbose = TRUE)
waterfall(values = portfolio_plot6$marginal_benefit, labels = portfolio_plot6$cards,
calc_total = TRUE, draw_lines = FALSE, total_rect_color = "orange",
total_rect_text_color = "black", rect_width = 0.9,
rect_text_labels = scales::dollar_format()(portfolio_plot6$marginal_benefit),
total_rect_text  = scales::dollar_format()(sum(portfolio_plot6$marginal_benefit))) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = TeX(sprintf(r'(K = %d    income = %s    $\eta$ = %.1f    $\theta$ = %.1f)',
K, income, eta, theta)), x = "", y = "Net Benefit") +
theme(plot.title = element_text(hjust = 0.5)) +
theme(axis.title = element_text()) +
scale_y_continuous(labels = scales::dollar_format())
dev.off()
# ##############################################################################
# ##############################################################################
# FLAWS I CURRENTLY IGNORE:
# - FIXED: cards can only be selected once, but I HAD TO CHANGE THE CARD IDs.
# - Overlapping benefits. Currently can have multiple cards with lounge access.
#   But maybe that's okay...
# - Bi- and Trifectas. Currently point values don't change once premium cards are added.
# - Use of benefits is card-dependent in reality. I assume theta is same for all cards...
#   MAKE theta BANK-DEPENDENT? I don't value Amex benefits as much as Capital One for example...
# PLOTS TO MAKE:
# 1. DONE! 3 panels: horizontal bar chart with the top card on bottom, and 9 other cards on top
# 2. DONE! 3 panels: eta, theta = (0,0), (0.5, 0.5) and (1,1) and then
# marginal benefit vs number of cards for 9 lines of income, the avg income
# being thicker. $50 overplotted as red line.
# 3. DONE! 3 panels: eta, theta = (0,0), (0.5, 0.5) and (1,1) and then
# Return on Spend vs number of cards for 9 lines of income, the avg income
# being thicker.
# 4. DONE! For K = 5 cards: Net benefit as a function of 9 incomes, for eta, theta = 0, 0.5, 1.
# 5. DONE! For K = 5 and 3 incomes: Return-On-Spend contour plot for theta (y-axis)
# vs eta (x-axis)
# UPDATES TO MAKE:
# - DONE! Redo all plots once benefits stacking is fixed
# - DONE! Make income lines more readable. Use linetypes, and/or plot less of them
# - DONE! Change the first set of portfolio plots to WATERFALL charts
# - NOT DONE: Explain eta and theta on the axes (will need to explain this in the Shiny App)
# - Think of how to build in a Bank or Card filter in the algorithm!
# - Think of how to make a variable for minimum benefit required and return number of cards
#   only for benefits above this minimum.
# After Monte Carlo: Make a plot of the 5 most recommended cards in all simulations!
runApp()
# Clear workspace
rm(list = ls(all = TRUE))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
budget <- get_budget('avg', budget_data)
# Clear workspace
rm(list = ls(all = TRUE))
# Read the budget selection and card portfolio selection functions
source("CCPortfolioFunctions.R")
cards_data <- read.csv(file = "../Data/CreditCards.csv", header = TRUE)
budget_data <- read.csv(file = '../Data/BudgetIncome.csv', header = TRUE)
budget <- get_budget(income, budget_data)
budget <- get_budget('avg', budget_data)
income <- 'avg'
budget <- get_budget('avg', budget_data)
names(budget)
typeof(budget)
budget
runApp()
runApp()
runApp()
runApp()
runApp('CCPortfolioShinyApp.R')
runApp('CCPortfolioShinyApp.R')
runApp('~/Documents/UCF/Fall23/QMB6304/R/Shiny/Layout_Themes/7-Plot Theme.R')
install.packages("thematic")
runApp('~/Documents/UCF/Fall23/QMB6304/R/Shiny/Layout_Themes/7-Plot Theme.R')
runApp('~/Documents/UCF/Fall23/QMB6304/R/Shiny/Layout_Themes/6-Theme.R')
runApp('~/Documents/UCF/Fall23/QMB6304/R/Shiny/Layout_Themes/5-navbar.R')
runApp('~/Documents/UCF/Fall23/QMB6304/R/Shiny/Layout_Themes/4-navlist.R')
runApp('~/Documents/UCF/Fall23/QMB6304/R/Shiny/Layout_Themes/3-tabset 2.R')
runApp('~/Documents/UCF/Fall23/QMB6304/R/Shiny/Layout_Themes/2-tabset.R')
runApp('~/Documents/UCF/Fall23/QMB6304/R/Shiny/Layout_Themes/1-Central Limit Theorem.R')
runApp('~/Documents/UCF/Fall23/QMB6304/R/Shiny/Dashboards/Dashboard-2.R')
install.packages("shinydashboard")
runApp('~/Documents/UCF/Fall23/QMB6304/R/Shiny/Dashboards/Dashboard-2.R')
runApp('~/Documents/UCF/Fall23/QMB6304/R/Shiny/Dashboards/Dashboard-1.R')
runApp('~/Documents/UCF/Fall23/QMB6304/R/Shiny/Dashboards/Dashboard-3.R')
runApp('~/Documents/UCF/Fall23/QMB6304/R/Shiny/Dashboards/Dashboard-2.R')
runApp('~/Documents/UCF/Fall23/QMB6304/R/Shiny/Dynamic UI/14-ui 2.R')
runApp('~/Documents/UCF/Fall23/QMB6304/R/Shiny/Dynamic UI/14-ui 2.R')
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
library(shiny); runApp('~/Documents/UCF/Fall23/QMB6304/R/Shiny/Dynamic UI/14-ui 2.R')
runApp('CCPortfolioShinyApp.R')
runApp('CCPortfolioShinyApp.R')
runApp('CCPortfolioShinyApp.R')
runApp('CCPortfolioShinyApp.R')
runApp('CCPortfolioShinyApp.R')
runApp('CCPortfolioShinyApp.R')
bslib::bs_theme_preview(united)
bslib::bs_theme_preview("united"")
)
runApp('CCPortfolioShinyApp.R')
runApp('CCPortfolioShinyApp.R')
runApp('CCPortfolioShinyApp.R')
runApp('CCPortfolioShinyApp.R')
runApp('CCPortfolioShinyApp.R')
runApp('CCPortfolioShinyApp_original.R')
runApp('CCPortfolioShinyApp.R')
runApp('CCPortfolioShinyApp.R')
runApp('CCPortfolioShinyApp.R')
runApp('CCPortfolioShinyApp.R')
runApp('CCPortfolioShinyApp.R')
runApp('CCPortfolioShinyApp.R')
runApp('CCPortfolioShinyApp.R')
runApp('CCPortfolioShinyApp.R')
runApp('CCPortfolioShinyApp.R')
runApp('CCPortfolioShinyApp.R')
runApp('CCPortfolioShinyApp.R')
runApp('CCPortfolioShinyApp_original.R')
runApp('CCPortfolioShinyApp_original.R')
runApp('CCPortfolioShinyApp_original.R')
runApp('CCPortfolioShinyApp_original.R')
runApp('CCPortfolioShinyApp.R')
runApp('CCPortfolioShinyApp.R')
runApp('CCPortfolioShinyApp.R')
runApp('CCPortfolioShinyApp.R')
runApp('CCPortfolioShinyApp.R')
runApp('CCPortfolioShinyApp.R')
runApp('CCPortfolioShinyApp.R')
runApp('CCPortfolioShinyApp.R')
install.packages('rsconnect')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='remcoscheepmaker',
token='E960C59CB64EF66EF65FFE477B26F279',
secret='<SECRET>')
rsconnect::setAccountInfo(name='remcoscheepmaker',
token='E960C59CB64EF66EF65FFE477B26F279',
secret='zcegzZ7BXGRn9KyAaiv1D0M7lq0tRoHntRgGJ1tO')
library(rsconnect)
rsconnect::deployApp('/Users/Remco/Documents/UCF/Summer24/Project/Code/CCPortfolioShinyApp.R')
library(shiny); runApp('CCPortfolioShinyApp.R')
runApp('CCPortfolioShinyApp.R')
runApp('~/Documents/UCF/Fall23/QMB6304/R/Shiny/Dashboards/Dashboard-2.R')
runApp('CCPortfolioShinyApp.R')
runApp('CCPortfolioShinyApp.R')
library(shiny); runApp('CCPortfolioShinyApp.R')
library(shiny)
runApp('CCPortfolioShinyApp.R')
